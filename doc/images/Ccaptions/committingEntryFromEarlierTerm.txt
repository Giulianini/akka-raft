S1 era il leader del term 2, ed è riuscito a replicare l'entry con indice 3 solo in due log (il proprio e quello di S2).
Successivamente è stato eletto come leader S5, che ha ricevuto 3 richieste e le ha inserite nel proprio log, senza essere a conoscenza delle entry del term 2.
Il term 3 termina prima che S5 riesca a replicare le entry con term 3 negli altri log.

A questo punto S1 viene rieletto leader e tenta di replicare il proprio log. Troverà un mismatch tra il proprio log e quelli di S3,S4 e S5 in corrispondenza dell'indice 3.
Dopo aver replicato l'entry con index=3 e term =2, nel log di S3, ci si trova nella situazione in cui essa compare nella maggioranza dei server. A questo punto verrebbe da pensare che S1 possa fare commit dell'entry all'indice 3, ma ciò non è possibile.
Se venisse fatto, infatti, potrebbe accadere che il term 4 termini e che S5 venga eletto (da S2, S3 e S4) leader del term 5. In questo caso andrebbe a sovrascrivere i log di S1, S2 ed S3 replicando le sue entry con term 3 e indici 3,4,5.
Ci troveremmo in un caso in cui delle entry che erano committate devono essere modificate e ciò andrebbe contro le proprietà dell'algoritmo, che garantisce che, una volta committata, una entry debba essere "safe" da eseguire.

Per evitare questo problema di inconsistenza viene aggiunta una nuova regola: un leader non può fare "commit" di una entry non realtiva al suo term corrente, fino a quando almeno una entry con term attuale non venga replicata nella maggiorparte dei server e poi "committata". Ciò risolve il problema perchè una delle proprietà dell'algoritmo è che se una entry è safe da committare, allora lo sono anche le precedenti.