@startuml
state "Leader" as Leader
  Candidate --> Leader : numVote > \n(sizeCluster/2)-1 
state "Follower" as Follower
  Follower -l-> Candidate : Time expired\n[Time=0 && inIdle=true]
state "Candidate" as Candidate {
  Candidate : Entry; do \n SendVoteRequest()\n serverState=Candidate\n Time = Random(minDelayElection,maxDelayElection)\n Term++\n numVote = 0
 
  [*] --> WaitingVotation
  state "Waiting Votation" as WaitingVotation
  state "Elaborate" as CandidateElaborate

  WaitingVotation --> CandidateElaborate : Handle msg\n[msgavaiable() = True]\n/getMsg()

  CandidateElaborate --> WaitingVotation : Vote request accepted\n numVote++
  CandidateElaborate --> WaitingVotation :Vote request \nrejected
  CandidateElaborate -u-> Follower : Received one message\nfrom leader\n[msg.getTerm > agetTerm]

  Candidate --> Candidate :Time expired\n[Time=0 && \nin_idle=true]
}
@enduml