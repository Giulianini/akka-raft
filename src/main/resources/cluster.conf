akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  #loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "ERROR"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"





  actor {
  default-dispatcher {
     type = Dispatcher
     #executor = "fork-join-executor"
     executor = "thread-pool-executor"

        thread-pool-executor {
        #  parallelism-min = 2
        #  parallelism-max = 4
            fixed-pool-size = 1
            parallelism-max = 1
        }
   throughput = 1
   }
     default-mailbox{
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }
    provider = "cluster"
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
    //serialization-bindings {
    //"sample.cluster.CborSerializable" = jackson-cbor
    //}
  }

  remote {
    artery.canonical {
      hostname = "127.0.0.1"
      port = 6000
    }
  }

  cluster {
    ip = 127.0.0.1
    auto-down-unreachable-after = 10s
    jmx.multi-mbeans-in-same-jvm = off
    log-info = on
    log-debug = on
    min-nr-of-members = 6
    seed-nodes = [
      "akka://RaftCluster@127.0.0.1:5000"
      , "akka://RaftCluster@127.0.0.1:5001"
    ]
  }
}
//akka.cluster.use-dispatcher = control-aware-dispatcher
